{"version":3,"file":"zod.module.js","sources":["../src/zod.ts"],"sourcesContent":["import { toNestErrors, validateFieldsNatively } from '@hookform/resolvers';\nimport { Parameters } from '@sinclair/typebox';\nimport { FieldError, FieldErrors, appendErrors } from 'react-hook-form';\nimport { ZodError, ZodType, z } from 'zod';\nimport type { Resolver } from './types';\n\nconst isZodError = (error: any): error is ZodError =>\n  Array.isArray(error?.errors);\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length; ) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport function zodResolver<T extends ZodType>(\n  schema: T,\n  schemaOptions?: Partial<z.ParseParams>,\n  resolverOptions: Parameters<Resolver<T>>[2] = {},\n): ReturnType<Resolver<T>> {\n  return async (\n    values: Parameters<ReturnType<Resolver<T>>>[0],\n    _: any,\n    options: Parameters<ReturnType<Resolver<T>>>[2],\n  ) => {\n    try {\n      const data: z.infer<T> = await (async function () {\n        if (resolverOptions.mode === 'sync') {\n          return schema.parse(values, schemaOptions);\n        } else {\n          return schema.parseAsync(values, schemaOptions);\n        }\n      })();\n\n      options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n      return {\n        errors: {} as FieldErrors,\n        values: resolverOptions.raw ? values : data,\n      };\n    } catch (error: any) {\n      if (isZodError(error)) {\n        return {\n          values: {},\n          errors: toNestErrors(\n            parseErrorSchema(\n              error.errors,\n              !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n            ),\n            options,\n          ),\n        };\n      }\n\n      throw error;\n    }\n  };\n}\n"],"names":["parseErrorSchema","zodErrors","validateAllFieldCriteria","errors","length","error","code","message","_path","path","join","unionError","unionErrors","type","forEach","e","push","types","messages","appendErrors","concat","shift","zodResolver","schema","schemaOptions","resolverOptions","values","_","options","Promise","resolve","mode","parse","parseAsync","reject","then","data","shouldUseNativeValidation","validateFieldsNatively","raw","_catch","Array","isArray","isZodError","toNestErrors","criteriaMode"],"mappings":"8HAMA,IAGMA,EAAmB,SACvBC,EACAC,GAGA,IADA,IAAMC,EAAqC,CAAE,EACtCF,EAAUG,QAAU,CACzB,IAAMC,EAAQJ,EAAU,GAChBK,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,QACRC,EAD0BH,EAATI,KACJC,KAAK,KAExB,IAAKP,EAAOK,GACV,GAAI,gBAAiBH,EAAO,CAC1B,IAAMM,EAAaN,EAAMO,YAAY,GAAGT,OAAO,GAE/CA,EAAOK,GAAS,CACdD,QAASI,EAAWJ,QACpBM,KAAMF,EAAWL,KAErB,MACEH,EAAOK,GAAS,CAAED,QAAAA,EAASM,KAAMP,GAUrC,GANI,gBAAiBD,GACnBA,EAAMO,YAAYE,QAAQ,SAACH,GACzB,OAAAA,EAAWR,OAAOW,QAAQ,SAACC,GAAM,OAAAd,EAAUe,KAAKD,EAAE,EAAC,GAInDb,EAA0B,CAC5B,IAAMe,EAAQd,EAAOK,GAAOS,MACtBC,EAAWD,GAASA,EAAMZ,EAAMC,MAEtCH,EAAOK,GAASW,EACdX,EACAN,EACAC,EACAG,EACAY,EACK,GAAgBE,OAAOF,EAAsBb,EAAME,SACpDF,EAAME,QAEd,CAEAN,EAAUoB,OACZ,CAEA,OAAOlB,CACT,EAEM,SAAUmB,EACdC,EACAC,EACAC,GAEA,gBAFAA,IAAAA,EAA8C,CAAE,GAEhD,SACEC,EACAC,EACAC,GAA+C,IAC7CC,OAAAA,QAAAC,gCACED,QAAAC,QAC6B,WAAM,IACnC,OACED,QAAAC,QAD2B,SAAzBL,EAAgBM,KACXR,EAAOS,MAAMN,EAAQF,GAErBD,EAAOU,WAAWP,EAAQF,GAErC,CAAC,MAAAT,GAAAc,OAAAA,QAAAK,OAAAnB,IAN8B,IAM3BoB,KANEC,SAAAA,GAUN,OAFAR,EAAQS,2BAA6BC,EAAuB,CAAA,EAAIV,GAEzD,CACLzB,OAAQ,CAAiB,EACzBuB,OAAQD,EAAgBc,IAAMb,EAASU,EACvC,4DAfFI,CACE,EAeH,SAAQnC,GACP,GA/Ea,SAACA,GAClB,OAAAoC,MAAMC,QAAa,MAALrC,OAAK,EAALA,EAAOF,OAAO,CA8EpBwC,CAAWtC,GACb,MAAO,CACLqB,OAAQ,CAAA,EACRvB,OAAQyC,EACN5C,EACEK,EAAMF,QACLyB,EAAQS,2BACkB,QAAzBT,EAAQiB,cAEZjB,IAKN,MAAMvB,CACR,GACF,CAAC,MAAAU,GAAA,OAAAc,QAAAK,OAAAnB,EACH,CAAA,CAAA"}